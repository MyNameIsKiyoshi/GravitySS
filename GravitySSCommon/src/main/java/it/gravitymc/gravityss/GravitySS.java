package it.gravitymc.gravityss;

import it.gravitymc.gravityss.commands.SSFinish;
import it.gravitymc.gravityss.commands.SSSettings;
import it.gravitymc.gravityss.events.*;
import it.gravitymc.gravityss.manager.PluginManager;
import net.luckperms.api.LuckPerms;
import org.bukkit.Bukkit;
import org.bukkit.command.CommandExecutor;
import org.bukkit.event.Listener;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.HashMap;

/**
 * YumaFramework Template AutoGenerated
 * For Support And More <a href="https://discord.gg/xJutm6qrZT">YumaFramework</a>
 */
@SuppressWarnings("ALL")
public final class GravitySS extends JavaPlugin {

    public static HashMap<String, String> targetName = new HashMap<String, String>();

    private static GravitySS instance;

    public static GravitySS getInstance() {
        return instance;
    }

    private PluginManager pluginManager;

    private void registerCommand(CommandExecutor ce, String command, JavaPlugin jp) {
        try {
            jp.getCommand(command).setExecutor(ce);
        } catch (NullPointerException e) {
            jp.getLogger().warning(String.format(command, e.getMessage()));
        }
    }

    private void registerEvent(Listener pm, String event, JavaPlugin jp) {
        try {
            jp.getServer().getPluginManager().registerEvents(pm, this);
        } catch (NullPointerException e) {
            jp.getLogger().warning(String.format(event, e.getMessage()));
        }
    }

    /**
     * Initialize Function | Used to save config
     * and initialize instances and more
     */
    public void Initialize() {
        saveDefaultConfig();
        getConfig().options().copyHeader(true); // getConfig().options().parseComments(true); in 1.16>
        getConfig().options().copyDefaults(true);
        instance = this;
        this.pluginManager = new PluginManager(this);
        RegisteredServiceProvider<LuckPerms> provider = Bukkit.getServicesManager().getRegistration(LuckPerms.class);
        if(provider != null){
            LuckPerms api = provider.getProvider();
        }
    }


    /**
     * Commands Function | Used to register Commands
     * Ex: this.registerCommand(new CommandClassName(), "CommandClassName", this);
     */
    public void Commands() {
        this.registerCommand(new SSSettings(pluginManager), "sssettings", this);
        this.registerCommand(new SSFinish(pluginManager), "ssfinish", this);
    }

    /**
     * Events Function | Used to register Events
     * Ex: this.registerEvent(new EventClassName(), "EventClassName", this);
     */
    public void Events() {
        this.registerEvent(new SSMoveEvent(pluginManager), "SSMoveEvent", this);
        this.registerEvent(new SSChatEvent(pluginManager), "SSChatEvent", this);
        this.registerEvent(new SSFinishGuiSwitch(pluginManager), "SSFinishGuiSwitch", this);
        this.registerEvent(new SSJoinEvent(pluginManager), "SSJoinEvent", this);
        this.registerEvent(new SSQuitEvent(pluginManager), "SSQuitEvent", this);
    }

    public void TabComplete(){
        getCommand("sssettings").setTabCompleter(new SSSettings(pluginManager));
    }

    /**
     * onEnable Function | This is the Main Function, Used to Initialize And Register
     * the plugin Logic, Events And Commands & More (On Startup)
     */
    @Override
    public void onEnable() {
        // Put Code Here
        Initialize();
        Events();
        Commands();
        TabComplete();
    }

    /**
     * onDisable Function | Used when the plugin Shutsdown (On Shutdown)
     */
    @Override
    public void onDisable() {
        // Put Code Here
    }

    /**
     * onLoad Function | Used when the plugin Load
     * (Worlds, Config, Entities, Tasks/Schedules And Chunks)
     */
    @Override
    public void onLoad() {
        // Put Code Here
    }
}
